-- Requiere extensión pgcrypto para gen_random_uuid()
create extension if not exists pgcrypto;

-- =========================
--  TABLAS MAESTRAS
-- =========================
create table if not exists public.roles (
  id_rol               uuid primary key default gen_random_uuid(),
  codigo               text unique not null,
  descripcion          text,
  fecha_creacion       timestamptz not null default now(),
  fecha_modificacion   timestamptz
);

create table if not exists public.preferencias (
  id_preferencia       uuid primary key default gen_random_uuid(),
  descripcion          text,
  fecha_creacion       timestamptz not null default now(),
  fecha_modificacion   timestamptz,
  codigo               int4 unique
);

create table if not exists public.categorias (
  id_categoria         uuid primary key default gen_random_uuid(),
  nombre               text not null,
  descripcion          text,
  fecha_creacion       timestamptz not null default now(),
  fecha_modificacion   timestamptz,
  usuario_creacion     uuid references auth.users(id),
  usuario_modificacion uuid references auth.users(id)
);

create index if not exists categorias_usuario_creacion_idx
  on public.categorias (usuario_creacion);
create index if not exists categorias_usuario_modificacion_idx
  on public.categorias (usuario_modificacion);

-- =========================
--  PERFILES (1:1 con auth.users.id)
-- =========================
create table if not exists public.perfiles (
  id                   uuid primary key
                          references auth.users(id)
                          on update cascade
                          on delete cascade,
  nombre_usuario       text not null,
  id_rol               uuid references public.roles(id_rol) on update cascade,
  fecha_creacion       timestamptz not null default now(),
  fecha_modificacion   timestamptz,
  id_preferencia       uuid references public.preferencias(id_preferencia) on update cascade
);

create index if not exists perfiles_id_rol_idx
  on public.perfiles (id_rol);
create index if not exists perfiles_id_preferencia_idx
  on public.perfiles (id_preferencia);

-- =========================
--  PRODUCTOS
-- =========================
create table if not exists public.productos (
  id_producto          uuid primary key default gen_random_uuid(),
  nombre               text not null,
  marca                text,
  id_categoria         uuid references public.categorias(id_categoria) on update cascade,

  -- Nutrientes (ajusta precisión si lo deseas, p.ej. numeric(10,2))
  energia_kcal         numeric,
  proteinas_g          numeric,
  grasa_total_g        numeric,
  carbohidratos_g      numeric,
  azucares_g           numeric,
  sodio_mg             numeric,
  grasa_saturada_g     numeric,
  grasa_trans_g        numeric,
  grasa_monoinsat_g    numeric,
  grasa_poliinsat_g    numeric,
  colesterol_mg        numeric,
  fibra_dietetica_g    numeric,
  calcio_mg            numeric,
  fosforo_mg           numeric,
  hierro_mg            numeric,
  potasio_mg           numeric,
  vitamina_c_mg        numeric,

  -- Auditoría
  fecha_creacion       timestamptz not null default now(),
  fecha_modificacion   timestamptz,
  usuario_creacion     uuid references auth.users(id),
  usuario_modificacion uuid references auth.users(id)
);

create index if not exists productos_id_categoria_idx
  on public.productos (id_categoria);
create index if not exists productos_usuario_creacion_idx
  on public.productos (usuario_creacion);
create index if not exists productos_usuario_modificacion_idx
  on public.productos (usuario_modificacion);

-- =========================
--  INGREDIENTES (detalle por producto)
-- =========================
create table if not exists public.ingredientes (
  id_ingrediente       uuid primary key default gen_random_uuid(),
  id_producto          uuid not null
                          references public.productos(id_producto)
                          on update cascade
                          on delete cascade,
  nombre               text not null,
  fecha_creacion       timestamptz not null default now(),
  fecha_modificacion   timestamptz,
  usuario_creacion     uuid references auth.users(id),
  usuario_modificacion uuid references auth.users(id)
);

create index if not exists ingredientes_id_producto_idx
  on public.ingredientes (id_producto);
create index if not exists ingredientes_usuario_creacion_idx
  on public.ingredientes (usuario_creacion);
create index if not exists ingredientes_usuario_modificacion_idx
  on public.ingredientes (usuario_modificacion);
